---
import BaseLayout from '../layouts/BaseLayout.astro';
import GalleryComponent from '../components/Gallery.astro';
import { images } from '../data/gallery';

// Collect all unique tags for the filter
const allTags: string[] = [...new Set(images.flatMap((image) => image.tags || []))].sort() as string[];
---

<BaseLayout title="Photo Gallery">
    <div class="container mx-auto my-5">
        <div class="header-section">
            <h1 class="text-4xl font-bold text-center my-4 py-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">Photo Gallery</h1>
            <button class="filter-toggle mb-4 py-4" id="filter-toggle" aria-expanded="false">
                <span class="toggle-text">Show Filters</span>
                <svg class="toggle-icon" width="16" height="16" viewBox="0 0 16 16" fill="none">
                    <path d="M4 6L8 10L12 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
        
        <div class="filter-content" id="filter-content">
            <div class="filter-container">
                <label for="tag-filter" class="filter-label">Filter by tag:</label>
                <select id="tag-filter" class="tag-select">
                    <option value="">All images</option>
                    {allTags.map((tag: string) => (
                        <option value={tag}>{tag}</option>
                    ))}
                </select>
            </div>
            <div class="note-section">
                <p class="note-text">Click on any image to view it in full size</p>
            </div>
        </div>
        
        <GalleryComponent images={images} />
    </div>
</BaseLayout>

<style>
    .header-section {
        position: relative;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    .header-section h1 {
        text-align: center;
        margin: 0;
    }

    .filter-toggle {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background-color: #f3f4f6;
        border: 2px solid #e5e7eb;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: #374151;
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 120px;
    }

    .filter-toggle:hover {
        background-color: #e5e7eb;
        border-color: #d1d5db;
    }

    .filter-toggle:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .toggle-icon {
        transition: transform 0.2s ease;
    }

    .filter-toggle[aria-expanded="false"] .toggle-icon {
        transform: rotate(-90deg);
    }

    .filter-content {
        overflow: hidden;
        transition: max-height 0.3s ease, opacity 0.3s ease, margin-bottom 0.3s ease;
        max-height: 0;
        opacity: 0;
        margin-bottom: 0;
        text-align: center;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    .filter-content.expanded {
        max-height: 200px;
        opacity: 1;
        margin-bottom: 1rem;
    }

    .filter-container {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .filter-label {
        font-weight: 600;
        color: #374151;
        white-space: nowrap;
        line-height: 1.5;
        padding: 0.25rem 0;
    }

    .tag-select {
        padding: 0.5rem 1rem;
        border: 2px solid #e5e7eb;
        border-radius: 0.5rem;
        background-color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: border-color 0.2s ease;
        min-width: 200px;
    }

    .tag-select:hover {
        border-color: #d1d5db;
    }

    .tag-select:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .note-section {
        margin-top: 0.5rem;
    }

    .note-text {
        color: #6b7280;
        font-size: 0.875rem;
        margin: 0;
        font-style: italic;
    }

    @media (max-width: 768px) {
        .header-section {
            text-align: center;
        }

        .header-section h1 {
            text-align: center;
        }

        .filter-toggle {
            position: static;
            transform: none;
            margin: 1rem auto 0;
        }

        .filter-container {
            flex-direction: column;
            align-items: stretch;
            gap: 0.5rem;
        }
        
        .tag-select {
            min-width: auto;
        }
    }
</style>

<script>
    // Only run this code on the client side
    function initGallery() {
        const gallery = document.querySelector<HTMLElement>('#gallery');
        const tagFilter = document.querySelector<HTMLSelectElement>('#tag-filter');
        const filterToggle = document.querySelector<HTMLButtonElement>('#filter-toggle');
        const filterContent = document.querySelector<HTMLElement>('#filter-content');
        
        if (!gallery || !tagFilter || !filterToggle || !filterContent) return;

        // Toggle filter visibility
        function toggleFilter() {
            if (!filterToggle || !filterContent) return;
            
            const isExpanded = filterToggle.getAttribute('aria-expanded') === 'true';
            const newExpanded = !isExpanded;
            
            filterToggle.setAttribute('aria-expanded', newExpanded.toString());
            filterContent.classList.toggle('expanded', newExpanded);
            
            const toggleText = filterToggle.querySelector('.toggle-text');
            if (toggleText) {
                toggleText.textContent = newExpanded ? 'Hide Filters' : 'Show Filters';
            }
        }

        // Filter function
        function filterImages() {
            if (!tagFilter || !gallery) return;
            
            const selectedTag = tagFilter.value;
            const imageWrappers = gallery.querySelectorAll<HTMLElement>('.image-wrapper');
            
            console.log('Filtering by tag:', selectedTag);
            
            imageWrappers.forEach(wrapper => {
                // Get all tag classes from the wrapper
                const wrapperClasses = Array.from(wrapper.classList);
                const tagClasses = wrapperClasses.filter(cls => cls.startsWith('tag-'));
                
                console.log('Wrapper classes:', wrapperClasses);
                console.log('Tag classes:', tagClasses);
                
                // Convert tag classes back to original tag names
                const wrapperTags = tagClasses.map(cls => {
                    const tagName = cls.replace('tag-', '');
                    return tagName.replace(/-/g, ' ');
                });
                
                console.log('Wrapper tags:', wrapperTags);
                
                if (!selectedTag || wrapperTags.includes(selectedTag)) {
                    wrapper.classList.remove('hidden');
                    console.log('Showing wrapper with tags:', wrapperTags);
                } else {
                    wrapper.classList.add('hidden');
                    console.log('Hiding wrapper with tags:', wrapperTags);
                }
            });
        }

        // Add event listeners
        filterToggle.addEventListener('click', toggleFilter);
        tagFilter.addEventListener('change', filterImages);

        // Wait for all images to load
        const images = gallery.querySelectorAll<HTMLImageElement>('img');
        
        Promise.all(
            Array.from(images).map(img => {
                if (img.complete) return Promise.resolve();
                return new Promise(resolve => {
                    img.onload = resolve;
                    img.onerror = resolve;
                });
            })
        ).then(() => {
            // All images are loaded
            console.log('All gallery images loaded');
        });
    }

    // Run the initialization when the DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initGallery);
    } else {
        initGallery();
    }
</script>
