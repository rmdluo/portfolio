---
import ImageCard from './common/ImageCard.astro';
import type { ImageCardProps } from '../types/ImageCardProps';
const { images } = Astro.props;
---

<div class="gallery" id="gallery">
    {images.map((image: ImageCardProps) => (
        <ImageCard 
            {...image}
            size="dynamic"
        />
    ))}
</div>

<style>
    .gallery {
        column-count: 4;
        column-gap: clamp(1rem, 2vw, 2rem);
        padding: clamp(1rem, 2vw, 2rem);
        width: 100%;
        margin: 0 auto;
        max-width: 1800px;
    }

    .gallery :global(.image-card) {
        break-inside: avoid;
        margin-bottom: clamp(1rem, 2vw, 2rem);
        width: 100% !important;
    }

    @media (max-width: 1400px) {
        .gallery {
            column-count: 3;
        }
    }

    @media (max-width: 1024px) {
        .gallery {
            column-count: 2;
        }
    }

    @media (max-width: 640px) {
        .gallery {
            column-count: 1;
        }
    }
</style>

<script>
    // Only run this code on the client side
    function initGallery() {
        const gallery = document.querySelector<HTMLElement>('#gallery');
        if (!gallery) return;

        // Wait for all images to load
        const images = gallery.querySelectorAll<HTMLImageElement>('img');
        
        Promise.all(
            Array.from(images).map(img => {
                if (img.complete) return Promise.resolve();
                return new Promise(resolve => {
                    img.onload = resolve;
                    img.onerror = resolve;
                });
            })
        ).then(() => {
            // All images are loaded
            console.log('All gallery images loaded');
        });
    }

    // Run the initialization when the DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initGallery);
    } else {
        initGallery();
    }
</script> 