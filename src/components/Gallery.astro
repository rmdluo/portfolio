---
import ImageCard from './common/ImageCard.astro';
import type { ImageCardProps } from '../types/ImageCardProps';
const { images } = Astro.props;

// Create balanced columns
const NUM_COLUMNS = 4;
const columns: ImageCardProps[][] = Array.from({ length: NUM_COLUMNS }, () => []);

// Distribute images across columns to maintain balance
images.forEach((image: ImageCardProps, index: number) => {
    const columnIndex = index % NUM_COLUMNS;
    columns[columnIndex].push(image);
});
---

<div class="gallery">
    {images.map((image: ImageCardProps) => (
        <ImageCard 
            {...image}
            size="dynamic"
        />
    ))}
</div>

<style>
    .gallery {
        column-count: 4;
        column-gap: clamp(1rem, 2vw, 2rem);
        padding: clamp(1rem, 2vw, 2rem);
        width: 100%;
        margin: 0 auto;
        max-width: 1800px;
    }

    .gallery :global(.image-card) {
        break-inside: avoid;
        margin-bottom: clamp(1rem, 2vw, 2rem);
        width: 100% !important;
    }

    @media (max-width: 1400px) {
        .gallery {
            column-count: 3;
        }
    }

    @media (max-width: 1024px) {
        .gallery {
            column-count: 2;
        }
    }

    @media (max-width: 640px) {
        .gallery {
            column-count: 1;
        }
    }
</style>

<script>
    // Rebalance columns when images load
    const gallery = document.querySelector('.gallery');
    if (!gallery) return;

    const columns = Array.from(gallery.querySelectorAll('.gallery-column'));
    
    // Function to get column heights
    const getColumnHeights = () => {
        return columns.map(col => col.getBoundingClientRect().height);
    };

    // Function to find shortest column
    const getShortestColumnIndex = () => {
        const heights = getColumnHeights();
        return heights.indexOf(Math.min(...heights));
    };

    // Function to find tallest column
    const getTallestColumnIndex = () => {
        const heights = getColumnHeights();
        return heights.indexOf(Math.max(...heights));
    };

    // Function to rebalance columns
    const rebalanceColumns = () => {
        let iterations = 0;
        const maxIterations = 10; // Prevent infinite loops
        
        while (iterations < maxIterations) {
            const tallestIndex = getTallestColumnIndex();
            const shortestIndex = getShortestColumnIndex();
            const heightDiff = getColumnHeights()[tallestIndex] - getColumnHeights()[shortestIndex];
            
            // Stop if difference is acceptable
            if (heightDiff < 100) break;
            
            // Move last item from tallest to shortest column
            const tallestColumn = columns[tallestIndex];
            const shortestColumn = columns[shortestIndex];
            
            if (tallestColumn.children.length > 1) {
                const lastItem = tallestColumn.lastElementChild;
                if (lastItem) {
                    shortestColumn.appendChild(lastItem);
                }
            }
            
            iterations++;
        }
    };

    // Wait for all images to load
    Promise.all(
        Array.from(document.querySelectorAll<HTMLImageElement>('.gallery img'))
            .map(img => {
                if (img.complete) return Promise.resolve();
                return new Promise(resolve => {
                    img.onload = resolve;
                    img.onerror = resolve;
                });
            })
    ).then(() => {
        // Initial balance
        rebalanceColumns();
        
        // Rebalance on window resize
        let resizeTimeout: ReturnType<typeof setTimeout>;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(rebalanceColumns, 100);
        });
    });
</script> 