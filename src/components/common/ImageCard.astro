---
import type { ImageCardProps, AspectRatio, Size } from '../../types/ImageCardProps';

const { src, alt, caption, aspectRatio = "landscape", size = "medium", unedited_src } = Astro.props as ImageCardProps;

import { Image } from '@astrojs/image/components';

const aspectRatioPadding: Record<AspectRatio, string> = {
    square: "100%", // 1:1
    landscape: "75%", // 4:3
    portrait: "133.33%", // 3:4
    wide: "56.25%", // 16:9
    ultrawide: "42.85%" // 21:9
};

const sizeClass: Record<Size, string> = {
    small: "w-48", // 192px
    medium: "w-72", // 288px
    large: "w-96", // 384px
    full: "w-full",
    dynamic: "w-dynamic"
};

const padding = aspectRatioPadding[aspectRatio];
const className = sizeClass[size];
---

<div class={`image-card ${className}`} tabindex="0" role="button" aria-label={`View ${alt} in full screen`}>
    <div class="image-container" style={`padding-top: ${padding};`} data-unedited-src={unedited_src}>
        <img 
            src={src} 
            alt={alt}
            loading="lazy"
            class="image"
        />
        <div class="expand-hint">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M15 3h6v6M9 21H3v-6M21 3l-7 7M3 21l7-7"/>
            </svg>
        </div>
    </div>
    {caption && (
        <p class="caption">{caption}</p>
    )}
</div>

<!-- Full screen modal -->
<div class="fullscreen-modal" role="dialog" aria-label="Full screen image view">
    <div class="modal-overlay"></div>
    <div class="modal-content">
        <img src={src} alt={alt} class="modal-image" />
        <div class="modal-controls">
            {unedited_src && (
                <label class="toggle-container">
                    <input type="checkbox" class="toggle-unedited" />
                    <span class="toggle-label">Show Unedited</span>
                </label>
            )}
            {caption && (
                <p class="modal-caption">{caption}</p>
            )}
        </div>
        <button class="close-button" aria-label="Close full screen view">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>
    </div>
</div>

<style>
    .image-card {
        position: relative;
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
        outline: none; /* Remove default focus outline */
    }

    .image-card:focus-visible {
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5);
    }

    /* Tailwind width classes */
    .w-48 {
        width: 12rem;
    }

    .w-72 {
        width: 18rem;
    }

    .w-96 {
        width: 24rem;
    }

    .w-full {
        width: 100%;
    }

    .w-dynamic {
        width: 100%;
        max-width: var(--min-image-width, 24rem);
    }

    .image-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .image-container {
        position: relative;
        width: 100%;
        overflow: hidden;
    }

    .image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .expand-hint {
        position: absolute;
        top: 0.75rem;
        right: 0.75rem;
        transform: scale(0.8);
        padding: 0.5rem;
        background: rgba(255, 255, 255, 0.9);
        border: none;
        border-radius: 50%;
        color: #1a1a1a;
        opacity: 0;
        transition: all 0.3s ease;
        z-index: 2;
    }

    .image-card:hover .expand-hint {
        opacity: 0.9;
        transform: scale(1);
    }

    .image-card:hover .image {
        transform: scale(1.05);
    }

    .caption {
        padding: 1rem;
        font-size: 0.875rem;
        color: #4B5563;
        text-align: center;
        background: white;
        pointer-events: none;
    }

    /* Fullscreen Modal */
    .fullscreen-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        visibility: hidden;
        pointer-events: none;
    }

    .modal-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        opacity: 0;
        transition: opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .modal-content {
        position: relative;
        max-width: 90vw;
        max-height: 85vh;
        margin: auto;
        opacity: 0;
        transform: scale(0.9) translateY(20px);
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        padding-bottom: 4rem;
    }

    .fullscreen-modal.active {
        visibility: visible;
        pointer-events: auto;
    }

    .fullscreen-modal.active .modal-overlay {
        opacity: 1;
    }

    .fullscreen-modal.active .modal-content {
        opacity: 1;
        transform: scale(1) translateY(0);
    }

    .modal-image {
        max-width: 100%;
        max-height: 85vh;
        object-fit: contain;
        border-radius: 8px;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
        transform-origin: center;
        transition: transform 0.3s ease;
    }

    .modal-controls {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 2rem;
        padding: 1rem;
        background: linear-gradient(to top, rgba(0, 0, 0, 0.5), transparent);
    }

    .toggle-container {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        color: white;
        font-size: 0.875rem;
        cursor: pointer;
        opacity: 0.9;
        transition: opacity 0.2s ease;
        padding: 0.5rem;
        border-radius: 2rem;
        background: rgba(0, 0, 0, 0.4);
    }

    .toggle-container:hover {
        opacity: 1;
        background: rgba(0, 0, 0, 0.6);
    }

    .toggle-unedited {
        appearance: none;
        width: 2.5rem;
        height: 1.25rem;
        border-radius: 1rem;
        background: rgba(255, 255, 255, 0.3);
        cursor: pointer;
        position: relative;
        transition: all 0.2s ease;
        border: 1px solid rgba(255, 255, 255, 0.4);
    }

    .toggle-unedited::after {
        content: '';
        position: absolute;
        top: 0.125rem;
        left: 0.125rem;
        width: 0.875rem;
        height: 0.875rem;
        background: white;
        border-radius: 50%;
        transition: transform 0.2s ease;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .toggle-unedited:checked {
        background: rgba(255, 255, 255, 0.9);
        border-color: white;
    }

    .toggle-unedited:checked::after {
        transform: translateX(1.25rem);
    }

    .toggle-label {
        user-select: none;
        font-weight: 400;
        letter-spacing: 0.02em;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .modal-caption {
        position: static;
        opacity: 1;
        transform: none;
    }

    .close-button {
        position: absolute;
        top: -2rem;
        right: -2rem;
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0.5rem;
        opacity: 0;
        transform: scale(0.8);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .fullscreen-modal.active .close-button {
        opacity: 1;
        transform: scale(1);
    }

    .close-button:hover {
        transform: scale(1.1) rotate(90deg);
    }

    /* Glass effect on hover */
    .image-container::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(
            to bottom,
            rgba(0, 0, 0, 0) 0%,
            rgba(0, 0, 0, 0.05) 100%
        );
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
    }

    .image-card:hover .image-container::after {
        opacity: 1;
    }

    /* Loading state */
    .image-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            rgba(255, 255, 255, 0) 0,
            rgba(255, 255, 255, 0.5) 50%,
            rgba(255, 255, 255, 0) 100%
        );
        animation: shimmer 1.5s infinite;
        transform: translateX(-100%);
        z-index: 1;
        opacity: 0.5;
    }

    .image-container.loaded::before {
        display: none;
    }

    @keyframes shimmer {
        100% {
            transform: translateX(100%);
        }
    }

    /* Responsive adjustments */
    @media (max-width: 640px) {
        .w-96, .w-72, .w-48 {
            width: 100%;
        }

        .modal-content {
            max-width: 95vw;
        }

        .close-button {
            top: -3rem;
            right: 0;
        }
    }
</style>

<script>
    // Find all image cards and modals
    const cards = document.querySelectorAll('.image-card');
    const modals = document.querySelectorAll('.fullscreen-modal');
    
    cards.forEach((card, index) => {
        const container = card.querySelector('.image-container');
        const img = container?.querySelector('img');
        const modal = modals[index];
        const closeButton = modal?.querySelector('.close-button');
        const modalImg = modal?.querySelector('.modal-image') as HTMLImageElement;
        const toggleCheckbox = modal?.querySelector('.toggle-unedited') as HTMLInputElement;
        
        if (img) {
            // When image loads
            img.onload = () => {
                container?.classList.add('loaded');
            };

            // If image is already cached and loaded
            if (img.complete) {
                container?.classList.add('loaded');
            }
        }

        // Store original and unedited src
        if (modalImg) {
            modalImg.dataset.editedSrc = modalImg.src;
            modalImg.dataset.uneditedSrc = img?.parentElement?.dataset.uneditedSrc || '';
        }

        // Handle toggle checkbox
        toggleCheckbox?.addEventListener('change', () => {
            if (!modalImg) return;
            
            if (toggleCheckbox.checked) {
                modalImg.src = modalImg.dataset.uneditedSrc || modalImg.src;
            } else {
                modalImg.src = modalImg.dataset.editedSrc || modalImg.src;
            }
        });

        // Open modal on card click or Enter/Space key
        const openModal = () => {
            modal?.classList.add('active');
            document.body.style.overflow = 'hidden';
            
            // Reset checkbox and image src when opening modal
            if (toggleCheckbox) {
                toggleCheckbox.checked = false;
            }
            if (modalImg) {
                modalImg.src = modalImg.dataset.editedSrc || modalImg.src;
            }
        };

        card.addEventListener('click', openModal);
        card.addEventListener('keydown', (e: Event) => {
            const keyEvent = e as KeyboardEvent;
            if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
                e.preventDefault();
                openModal();
            }
        });

        // Close modal on close button click
        closeButton?.addEventListener('click', () => {
            modal?.classList.remove('active');
            setTimeout(() => {
                document.body.style.overflow = '';
            }, 500); // Match the transition duration
        });

        // Close modal when clicking outside the image
        modal?.addEventListener('click', (e) => {
            const target = e.target as HTMLElement;
            if (target === modal || target.classList.contains('modal-overlay')) {
                modal.classList.remove('active');
                setTimeout(() => {
                    document.body.style.overflow = '';
                }, 500); // Match the transition duration
            }
        });
    });

    // Close modal on escape key
    document.addEventListener('keydown', (e: Event) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === 'Escape') {
            document.querySelectorAll('.fullscreen-modal.active').forEach(modal => {
                modal.classList.remove('active');
                setTimeout(() => {
                    document.body.style.overflow = '';
                }, 500); // Match the transition duration
            });
        }
    });
</script> 